// <auto-generated />
using System;
using EVCenterService.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EVCenterService.Migrations
{
    [DbContext(typeof(EVServiceCenterContext))]
    [Migration("20251017060431_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EVCenterService.Models.Account", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UserID")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("Certification")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("FullName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("UserId")
                        .HasName("PK__Account__1788CCAC376F95F8");

                    b.HasIndex(new[] { "Phone" }, "UQ__Account__5C7E359E226AF5C9")
                        .IsUnique()
                        .HasFilter("[Phone] IS NOT NULL");

                    b.HasIndex(new[] { "Email" }, "UQ__Account__A9D105341D624674")
                        .IsUnique();

                    b.ToTable("Account");
                });

            modelBuilder.Entity("EVCenterService.Models.Feedback", b =>
                {
                    b.Property<int>("FeedbackId")
                        .HasColumnType("int")
                        .HasColumnName("FeedbackID");

                    b.Property<string>("Comment")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("OrderId")
                        .HasColumnType("int")
                        .HasColumnName("OrderID");

                    b.Property<int?>("Rating")
                        .HasColumnType("int");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UserID");

                    b.HasKey("FeedbackId")
                        .HasName("PK__Feedback__6A4BEDF608B7A8D8");

                    b.HasIndex("OrderId");

                    b.HasIndex("UserId");

                    b.ToTable("Feedback");
                });

            modelBuilder.Entity("EVCenterService.Models.Invoice", b =>
                {
                    b.Property<int>("InvoiceId")
                        .HasColumnType("int")
                        .HasColumnName("InvoiceID");

                    b.Property<decimal?>("Amount")
                        .HasColumnType("decimal(12, 2)");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("IssueDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<Guid?>("SubscriptionId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("SubscriptionID");

                    b.HasKey("InvoiceId")
                        .HasName("PK__Invoice__D796AAD5F01DE521");

                    b.HasIndex("SubscriptionId");

                    b.ToTable("Invoice");
                });

            modelBuilder.Entity("EVCenterService.Models.MaintenanceCenter", b =>
                {
                    b.Property<int>("CenterId")
                        .HasColumnType("int")
                        .HasColumnName("CenterID");

                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<TimeOnly?>("CloseTime")
                        .HasColumnType("time");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<TimeOnly?>("OpenTime")
                        .HasColumnType("time");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.HasKey("CenterId")
                        .HasName("PK__Maintena__398FC7D7AF460D18");

                    b.ToTable("MaintenanceCenter");
                });

            modelBuilder.Entity("EVCenterService.Models.Notification", b =>
                {
                    b.Property<int>("NotificationId")
                        .HasColumnType("int")
                        .HasColumnName("NotificationID");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool?>("IsRead")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<Guid?>("ReceiverId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ReceiverID");

                    b.Property<DateTime?>("TriggerDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Type")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("NotificationId")
                        .HasName("PK__Notifica__20CF2E32499BFD16");

                    b.HasIndex("ReceiverId");

                    b.ToTable("Notification");
                });

            modelBuilder.Entity("EVCenterService.Models.OrderDetail", b =>
                {
                    b.Property<int>("OrderDetailId")
                        .HasColumnType("int")
                        .HasColumnName("OrderDetailID");

                    b.Property<int?>("OrderId")
                        .HasColumnType("int")
                        .HasColumnName("OrderID");

                    b.Property<int?>("Quantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<int?>("ServiceId")
                        .HasColumnType("int")
                        .HasColumnName("ServiceID");

                    b.Property<decimal?>("UnitPrice")
                        .HasColumnType("decimal(10, 2)");

                    b.HasKey("OrderDetailId")
                        .HasName("PK__OrderDet__D3B9D30C5D8A0C85");

                    b.HasIndex("OrderId");

                    b.HasIndex("ServiceId");

                    b.ToTable("OrderDetail");
                });

            modelBuilder.Entity("EVCenterService.Models.OrderService", b =>
                {
                    b.Property<int>("OrderId")
                        .HasColumnType("int")
                        .HasColumnName("OrderID");

                    b.Property<DateTime>("AppointmentDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ChecklistNote")
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<decimal?>("TotalCost")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UserID");

                    b.Property<int?>("VehicleId")
                        .HasColumnType("int")
                        .HasColumnName("VehicleID");

                    b.HasKey("OrderId")
                        .HasName("PK__OrderSer__C3905BAFC93F21DA");

                    b.HasIndex("UserId");

                    b.HasIndex("VehicleId");

                    b.ToTable("OrderService");
                });

            modelBuilder.Entity("EVCenterService.Models.Part", b =>
                {
                    b.Property<int>("PartId")
                        .HasColumnType("int")
                        .HasColumnName("PartID");

                    b.Property<string>("Brand")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Type")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<decimal?>("UnitPrice")
                        .HasColumnType("decimal(10, 2)");

                    b.HasKey("PartId")
                        .HasName("PK__Part__7C3F0D3032B58819");

                    b.ToTable("Part");
                });

            modelBuilder.Entity("EVCenterService.Models.PartsUsed", b =>
                {
                    b.Property<int>("UsageId")
                        .HasColumnType("int")
                        .HasColumnName("UsageID");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<int?>("OrderId")
                        .HasColumnType("int")
                        .HasColumnName("OrderID");

                    b.Property<int?>("PartId")
                        .HasColumnType("int")
                        .HasColumnName("PartID");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("UsageId")
                        .HasName("PK__PartsUse__29B197C0E363B8D3");

                    b.HasIndex("OrderId");

                    b.HasIndex("PartId");

                    b.ToTable("PartsUsed");
                });

            modelBuilder.Entity("EVCenterService.Models.ServiceCatalog", b =>
                {
                    b.Property<int>("ServiceId")
                        .HasColumnType("int")
                        .HasColumnName("ServiceID");

                    b.Property<decimal?>("BasePrice")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int?>("DurationMinutes")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.HasKey("ServiceId")
                        .HasName("PK__ServiceC__C51BB0EAA34714D3");

                    b.ToTable("ServiceCatalog");
                });

            modelBuilder.Entity("EVCenterService.Models.Slot", b =>
                {
                    b.Property<int>("SlotId")
                        .HasColumnType("int")
                        .HasColumnName("SlotID");

                    b.Property<int?>("CenterId")
                        .HasColumnType("int")
                        .HasColumnName("CenterID");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("datetime");

                    b.Property<int?>("OrderId")
                        .HasColumnType("int")
                        .HasColumnName("OrderID");

                    b.Property<DateTime?>("StartTime")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("TechnicianId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("TechnicianID");

                    b.HasKey("SlotId")
                        .HasName("PK__Slot__0A124A4F392B4E0A");

                    b.HasIndex("CenterId");

                    b.HasIndex("TechnicianId");

                    b.HasIndex(new[] { "OrderId" }, "UQ__Slot__C3905BAEB2FB822B")
                        .IsUnique()
                        .HasFilter("[OrderID] IS NOT NULL");

                    b.ToTable("Slot");
                });

            modelBuilder.Entity("EVCenterService.Models.Storage", b =>
                {
                    b.Property<int>("StorageId")
                        .HasColumnType("int")
                        .HasColumnName("StorageID");

                    b.Property<int?>("CenterId")
                        .HasColumnType("int")
                        .HasColumnName("CenterID");

                    b.Property<int?>("MinThreshold")
                        .HasColumnType("int");

                    b.Property<int?>("PartId")
                        .HasColumnType("int")
                        .HasColumnName("PartID");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("StorageId")
                        .HasName("PK__Storage__8A247E37D28F7A41");

                    b.HasIndex("PartId");

                    b.HasIndex(new[] { "CenterId", "PartId" }, "UQ__Storage__2E4C37056410AAE2")
                        .IsUnique()
                        .HasFilter("[CenterID] IS NOT NULL AND [PartID] IS NOT NULL");

                    b.ToTable("Storage");
                });

            modelBuilder.Entity("EVCenterService.Models.Subscription", b =>
                {
                    b.Property<Guid>("SubscriptionId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("SubscriptionID");

                    b.Property<bool?>("AutoRenew")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("PlanId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("PlanID");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasDefaultValue("active");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UserID");

                    b.HasKey("SubscriptionId")
                        .HasName("PK__Subscrip__9A2B24BD05B92A78");

                    b.HasIndex("PlanId");

                    b.HasIndex("UserId");

                    b.ToTable("Subscription");
                });

            modelBuilder.Entity("EVCenterService.Models.SubscriptionPlan", b =>
                {
                    b.Property<Guid>("PlanId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("PlanID");

                    b.Property<string>("Benefits")
                        .HasColumnType("text");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("DurationDays")
                        .HasColumnType("int");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<decimal>("PriceVnd")
                        .HasColumnType("decimal(12, 2)")
                        .HasColumnName("PriceVND");

                    b.HasKey("PlanId")
                        .HasName("PK__Subscrip__755C22D706673C48");

                    b.HasIndex(new[] { "Code" }, "UQ__Subscrip__A25C5AA731620A2C")
                        .IsUnique();

                    b.ToTable("SubscriptionPlan");
                });

            modelBuilder.Entity("EVCenterService.Models.Vehicle", b =>
                {
                    b.Property<int>("VehicleId")
                        .HasColumnType("int")
                        .HasColumnName("VehicleID");

                    b.Property<decimal?>("BatteryCapacity")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<DateOnly?>("LastMaintenanceDate")
                        .HasColumnType("date");

                    b.Property<decimal?>("Mileage")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<string>("Model")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UserID");

                    b.Property<string>("Vin")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("VIN");

                    b.HasKey("VehicleId")
                        .HasName("PK__Vehicle__476B54B29147CA38");

                    b.HasIndex("UserId");

                    b.HasIndex(new[] { "Vin" }, "UQ__Vehicle__C5DF234C30687499")
                        .IsUnique();

                    b.ToTable("Vehicle");
                });

            modelBuilder.Entity("EVCenterService.Models.Feedback", b =>
                {
                    b.HasOne("EVCenterService.Models.OrderService", "Order")
                        .WithMany("Feedbacks")
                        .HasForeignKey("OrderId")
                        .HasConstraintName("FK__Feedback__OrderI__6FE99F9F");

                    b.HasOne("EVCenterService.Models.Account", "User")
                        .WithMany("Feedbacks")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__Feedback__UserID__70DDC3D8");

                    b.Navigation("Order");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EVCenterService.Models.Invoice", b =>
                {
                    b.HasOne("EVCenterService.Models.Subscription", "Subscription")
                        .WithMany("Invoices")
                        .HasForeignKey("SubscriptionId")
                        .HasConstraintName("FK__Invoice__Subscri__68487DD7");

                    b.Navigation("Subscription");
                });

            modelBuilder.Entity("EVCenterService.Models.Notification", b =>
                {
                    b.HasOne("EVCenterService.Models.Account", "Receiver")
                        .WithMany("Notifications")
                        .HasForeignKey("ReceiverId")
                        .HasConstraintName("FK__Notificat__Recei__6C190EBB");

                    b.Navigation("Receiver");
                });

            modelBuilder.Entity("EVCenterService.Models.OrderDetail", b =>
                {
                    b.HasOne("EVCenterService.Models.OrderService", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .HasConstraintName("FK__OrderDeta__Order__5070F446");

                    b.HasOne("EVCenterService.Models.ServiceCatalog", "Service")
                        .WithMany("OrderDetails")
                        .HasForeignKey("ServiceId")
                        .HasConstraintName("FK__OrderDeta__Servi__5165187F");

                    b.Navigation("Order");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("EVCenterService.Models.OrderService", b =>
                {
                    b.HasOne("EVCenterService.Models.Account", "User")
                        .WithMany("OrderServices")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__OrderServ__UserI__4CA06362");

                    b.HasOne("EVCenterService.Models.Vehicle", "Vehicle")
                        .WithMany("OrderServices")
                        .HasForeignKey("VehicleId")
                        .HasConstraintName("FK__OrderServ__Vehic__4BAC3F29");

                    b.Navigation("User");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("EVCenterService.Models.PartsUsed", b =>
                {
                    b.HasOne("EVCenterService.Models.OrderService", "Order")
                        .WithMany("PartsUseds")
                        .HasForeignKey("OrderId")
                        .HasConstraintName("FK__PartsUsed__Order__5441852A");

                    b.HasOne("EVCenterService.Models.Part", "Part")
                        .WithMany("PartsUseds")
                        .HasForeignKey("PartId")
                        .HasConstraintName("FK__PartsUsed__PartI__5535A963");

                    b.Navigation("Order");

                    b.Navigation("Part");
                });

            modelBuilder.Entity("EVCenterService.Models.Slot", b =>
                {
                    b.HasOne("EVCenterService.Models.MaintenanceCenter", "Center")
                        .WithMany("Slots")
                        .HasForeignKey("CenterId")
                        .HasConstraintName("FK__Slot__CenterID__59063A47");

                    b.HasOne("EVCenterService.Models.OrderService", "Order")
                        .WithOne("Slot")
                        .HasForeignKey("EVCenterService.Models.Slot", "OrderId")
                        .HasConstraintName("FK__Slot__OrderID__5AEE82B9");

                    b.HasOne("EVCenterService.Models.Account", "Technician")
                        .WithMany("Slots")
                        .HasForeignKey("TechnicianId")
                        .HasConstraintName("FK__Slot__Technician__59FA5E80");

                    b.Navigation("Center");

                    b.Navigation("Order");

                    b.Navigation("Technician");
                });

            modelBuilder.Entity("EVCenterService.Models.Storage", b =>
                {
                    b.HasOne("EVCenterService.Models.MaintenanceCenter", "Center")
                        .WithMany("Storages")
                        .HasForeignKey("CenterId")
                        .HasConstraintName("FK__Storage__CenterI__45F365D3");

                    b.HasOne("EVCenterService.Models.Part", "Part")
                        .WithMany("Storages")
                        .HasForeignKey("PartId")
                        .HasConstraintName("FK__Storage__PartID__46E78A0C");

                    b.Navigation("Center");

                    b.Navigation("Part");
                });

            modelBuilder.Entity("EVCenterService.Models.Subscription", b =>
                {
                    b.HasOne("EVCenterService.Models.SubscriptionPlan", "Plan")
                        .WithMany("Subscriptions")
                        .HasForeignKey("PlanId")
                        .HasConstraintName("FK__Subscript__PlanI__656C112C");

                    b.HasOne("EVCenterService.Models.Account", "User")
                        .WithMany("Subscriptions")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__Subscript__UserI__6477ECF3");

                    b.Navigation("Plan");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EVCenterService.Models.Vehicle", b =>
                {
                    b.HasOne("EVCenterService.Models.Account", "User")
                        .WithMany("Vehicles")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__Vehicle__UserID__3D5E1FD2");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EVCenterService.Models.Account", b =>
                {
                    b.Navigation("Feedbacks");

                    b.Navigation("Notifications");

                    b.Navigation("OrderServices");

                    b.Navigation("Slots");

                    b.Navigation("Subscriptions");

                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("EVCenterService.Models.MaintenanceCenter", b =>
                {
                    b.Navigation("Slots");

                    b.Navigation("Storages");
                });

            modelBuilder.Entity("EVCenterService.Models.OrderService", b =>
                {
                    b.Navigation("Feedbacks");

                    b.Navigation("OrderDetails");

                    b.Navigation("PartsUseds");

                    b.Navigation("Slot");
                });

            modelBuilder.Entity("EVCenterService.Models.Part", b =>
                {
                    b.Navigation("PartsUseds");

                    b.Navigation("Storages");
                });

            modelBuilder.Entity("EVCenterService.Models.ServiceCatalog", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("EVCenterService.Models.Subscription", b =>
                {
                    b.Navigation("Invoices");
                });

            modelBuilder.Entity("EVCenterService.Models.SubscriptionPlan", b =>
                {
                    b.Navigation("Subscriptions");
                });

            modelBuilder.Entity("EVCenterService.Models.Vehicle", b =>
                {
                    b.Navigation("OrderServices");
                });
#pragma warning restore 612, 618
        }
    }
}
