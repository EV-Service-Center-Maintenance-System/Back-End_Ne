// <auto-generated />
using System;
using EVCenterService.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EVCenterService.Migrations
{
    [DbContext(typeof(EVServiceCenterContext))]
    partial class EVServiceCenterContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EVCenterService.Models.Account", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UserID")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("Certification")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("FullName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("UserId")
                        .HasName("PK__Account__1788CCAC376F95F8");

                    b.HasIndex(new[] { "Phone" }, "UQ__Account__5C7E359E226AF5C9")
                        .IsUnique()
                        .HasFilter("[Phone] IS NOT NULL");

                    b.HasIndex(new[] { "Email" }, "UQ__Account__A9D105341D624674")
                        .IsUnique();

                    b.ToTable("Account");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("f0236613-101d-4633-8bbd-634eeecfdaa4"),
                            Email = "admin@gmail.com",
                            FullName = "Admin",
                            Password = "AQAAAAIAAYagAAAAEJH8E8X3GMdH1foBsdQ5MQO+cJJ8bQ9yFnZXS8lr6/j4EcXL/rKf35KaD2P0m5q5sg==",
                            Phone = "0901000001",
                            Role = "Admin",
                            Status = "Active"
                        },
                        new
                        {
                            UserId = new Guid("e7e85ab2-c968-4b00-b8ab-eb1250ffcbc0"),
                            Certification = "EV Maintenance Level 1",
                            Email = "tech1@gmail.com",
                            FullName = "Tran Van B",
                            Password = "AQAAAAIAAYagAAAAEPTzzMMJUGu0eNSmmX391OfKZiIlZttZnsy50u4D7NnPJCGi1BcKRY06lfYfn9CUMA==",
                            Phone = "0902000002",
                            Role = "Technician",
                            Status = "Active"
                        },
                        new
                        {
                            UserId = new Guid("5f06e2df-3e55-4dbe-b646-649f6a0c1784"),
                            Certification = "EV Battery Specialist",
                            Email = "tech2@gmail.com",
                            FullName = "Le Thi C",
                            Password = "AQAAAAIAAYagAAAAEPuEweg4GwluQNj5tgY/rcXfOGVz55pfCTdmkTrm6Zz00541JmHk1npt0As6BEE5MQ==",
                            Phone = "0903000003",
                            Role = "Technician",
                            Status = "Active"
                        },
                        new
                        {
                            UserId = new Guid("d591319d-f93c-4425-9d25-788a8e0560ca"),
                            Email = "staff@gmail.com",
                            FullName = "Phan Anh C",
                            Password = "AQAAAAIAAYagAAAAEP+chYJOiKIkCWO0xatjblQQE0ev/6YbghOSBXZDuKLp0jeODd9v8jgG89Jnu4vpbg==",
                            Phone = "0906000006",
                            Role = "Staff",
                            Status = "Active"
                        },
                        new
                        {
                            UserId = new Guid("84d971da-f79c-4071-b38c-0d41bbe05896"),
                            Email = "user1@gmail.com",
                            FullName = "Pham Van D",
                            Password = "AQAAAAIAAYagAAAAEIafCabwuZ76VVOvph/P4PecCUovWm98txQpyQsTTHggRG2zsgAMV4mpQwNGI1ewdg==",
                            Phone = "0904000004",
                            Role = "Customer",
                            Status = "Active"
                        },
                        new
                        {
                            UserId = new Guid("204d12c7-5c95-4112-90b7-4ff604d3c518"),
                            Email = "user2@gmail.com",
                            FullName = "Do Thi E",
                            Password = "AQAAAAIAAYagAAAAEDQe02X7ZL5Ex23HILQVyzSrNik6gw/JshiSOsJR/TmSPiGNIc0eGbykgXm0V6l9Nw==",
                            Phone = "0905000005",
                            Role = "Customer",
                            Status = "Active"
                        });
                });

            modelBuilder.Entity("EVCenterService.Models.Feedback", b =>
                {
                    b.Property<int>("FeedbackId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("FeedbackID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FeedbackId"));

                    b.Property<string>("Comment")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("OrderId")
                        .HasColumnType("int")
                        .HasColumnName("OrderID");

                    b.Property<int?>("Rating")
                        .HasColumnType("int");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UserID");

                    b.HasKey("FeedbackId")
                        .HasName("PK__Feedback__6A4BEDF608B7A8D8");

                    b.HasIndex("OrderId");

                    b.HasIndex("UserId");

                    b.ToTable("Feedback");

                    b.HasData(
                        new
                        {
                            FeedbackId = 1,
                            Comment = "Excellent service! Technician was professional.",
                            CreatedAt = new DateTime(2025, 10, 21, 21, 24, 12, 378, DateTimeKind.Local).AddTicks(5363),
                            OrderId = 1,
                            Rating = 5,
                            UserId = new Guid("84d971da-f79c-4071-b38c-0d41bbe05896")
                        });
                });

            modelBuilder.Entity("EVCenterService.Models.Invoice", b =>
                {
                    b.Property<int>("InvoiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("InvoiceID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InvoiceId"));

                    b.Property<decimal?>("Amount")
                        .HasColumnType("decimal(12, 2)");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("IssueDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<Guid?>("SubscriptionId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("SubscriptionID");

                    b.HasKey("InvoiceId")
                        .HasName("PK__Invoice__D796AAD5F01DE521");

                    b.HasIndex("SubscriptionId");

                    b.ToTable("Invoice");

                    b.HasData(
                        new
                        {
                            InvoiceId = 1,
                            Amount = 999000m,
                            DueDate = new DateTime(2025, 9, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IssueDate = new DateTime(2025, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Paid",
                            SubscriptionId = new Guid("d4c2fd9c-00ff-40ff-ab88-3eb91f4150f4")
                        });
                });

            modelBuilder.Entity("EVCenterService.Models.MaintenanceCenter", b =>
                {
                    b.Property<int>("CenterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CenterID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CenterId"));

                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<TimeOnly?>("CloseTime")
                        .HasColumnType("time");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<TimeOnly?>("OpenTime")
                        .HasColumnType("time");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.HasKey("CenterId")
                        .HasName("PK__Maintena__398FC7D7AF460D18");

                    b.ToTable("MaintenanceCenter");

                    b.HasData(
                        new
                        {
                            CenterId = 1,
                            Address = "12 Le Loi, Q1, HCM",
                            CloseTime = new TimeOnly(18, 0, 0),
                            Email = "center1@evcenter.vn",
                            Name = "EV Center - District 1",
                            OpenTime = new TimeOnly(8, 0, 0),
                            Phone = "0281111111"
                        },
                        new
                        {
                            CenterId = 2,
                            Address = "22 Vo Van Ngan, Thu Duc, HCM",
                            CloseTime = new TimeOnly(17, 30, 0),
                            Email = "center2@evcenter.vn",
                            Name = "EV Center - Thu Duc",
                            OpenTime = new TimeOnly(8, 0, 0),
                            Phone = "0282222222"
                        });
                });

            modelBuilder.Entity("EVCenterService.Models.Notification", b =>
                {
                    b.Property<int>("NotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("NotificationID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NotificationId"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool?>("IsRead")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<Guid?>("ReceiverId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ReceiverID");

                    b.Property<DateTime?>("TriggerDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Type")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("NotificationId")
                        .HasName("PK__Notifica__20CF2E32499BFD16");

                    b.HasIndex("ReceiverId");

                    b.ToTable("Notification");

                    b.HasData(
                        new
                        {
                            NotificationId = 1,
                            Content = "Your vehicle maintenance is completed.",
                            IsRead = false,
                            ReceiverId = new Guid("84d971da-f79c-4071-b38c-0d41bbe05896"),
                            TriggerDate = new DateTime(2025, 10, 21, 21, 24, 12, 378, DateTimeKind.Local).AddTicks(5332),
                            Type = "StatusUpdate"
                        },
                        new
                        {
                            NotificationId = 2,
                            Content = "Your appointment is scheduled for tomorrow.",
                            IsRead = false,
                            ReceiverId = new Guid("204d12c7-5c95-4112-90b7-4ff604d3c518"),
                            TriggerDate = new DateTime(2025, 10, 21, 21, 24, 12, 378, DateTimeKind.Local).AddTicks(5335),
                            Type = "MaintenanceReminder"
                        });
                });

            modelBuilder.Entity("EVCenterService.Models.OrderDetail", b =>
                {
                    b.Property<int>("OrderDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("OrderDetailID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderDetailId"));

                    b.Property<int?>("OrderId")
                        .HasColumnType("int")
                        .HasColumnName("OrderID");

                    b.Property<int?>("Quantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<int?>("ServiceId")
                        .HasColumnType("int")
                        .HasColumnName("ServiceID");

                    b.Property<decimal?>("UnitPrice")
                        .HasColumnType("decimal(10, 2)");

                    b.HasKey("OrderDetailId")
                        .HasName("PK__OrderDet__D3B9D30C5D8A0C85");

                    b.HasIndex("OrderId");

                    b.HasIndex("ServiceId");

                    b.ToTable("OrderDetail");

                    b.HasData(
                        new
                        {
                            OrderDetailId = 1,
                            OrderId = 1,
                            Quantity = 1,
                            ServiceId = 2,
                            UnitPrice = 1500000m
                        },
                        new
                        {
                            OrderDetailId = 2,
                            OrderId = 1,
                            Quantity = 1,
                            ServiceId = 3,
                            UnitPrice = 1000000m
                        },
                        new
                        {
                            OrderDetailId = 3,
                            OrderId = 2,
                            Quantity = 1,
                            ServiceId = 4,
                            UnitPrice = 1000000m
                        });
                });

            modelBuilder.Entity("EVCenterService.Models.OrderService", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("OrderID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderId"));

                    b.Property<DateTime>("AppointmentDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ChecklistNote")
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<decimal?>("TotalCost")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UserID");

                    b.Property<int?>("VehicleId")
                        .HasColumnType("int")
                        .HasColumnName("VehicleID");

                    b.HasKey("OrderId")
                        .HasName("PK__OrderSer__C3905BAFC93F21DA");

                    b.HasIndex("UserId");

                    b.HasIndex("VehicleId");

                    b.ToTable("OrderService");

                    b.HasData(
                        new
                        {
                            OrderId = 1,
                            AppointmentDate = new DateTime(2025, 10, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ChecklistNote = "Replaced brake pads, coolant check",
                            Status = "Completed",
                            TotalCost = 2500000m,
                            UserId = new Guid("84d971da-f79c-4071-b38c-0d41bbe05896"),
                            VehicleId = 1
                        },
                        new
                        {
                            OrderId = 2,
                            AppointmentDate = new DateTime(2025, 10, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ChecklistNote = "General checkup",
                            Status = "Pending",
                            TotalCost = 1000000m,
                            UserId = new Guid("204d12c7-5c95-4112-90b7-4ff604d3c518"),
                            VehicleId = 2
                        });
                });

            modelBuilder.Entity("EVCenterService.Models.Part", b =>
                {
                    b.Property<int>("PartId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PartID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PartId"));

                    b.Property<string>("Brand")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Type")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<decimal?>("UnitPrice")
                        .HasColumnType("decimal(10, 2)");

                    b.HasKey("PartId")
                        .HasName("PK__Part__7C3F0D3032B58819");

                    b.ToTable("Part");

                    b.HasData(
                        new
                        {
                            PartId = 1,
                            Brand = "Tesla",
                            Name = "EV Battery Pack",
                            Type = "Battery",
                            UnitPrice = 15000000m
                        },
                        new
                        {
                            PartId = 2,
                            Brand = "VinFast",
                            Name = "Charging Port",
                            Type = "Electrical",
                            UnitPrice = 3000000m
                        },
                        new
                        {
                            PartId = 3,
                            Brand = "Brembo",
                            Name = "Brake Pad",
                            Type = "Mechanical",
                            UnitPrice = 1000000m
                        },
                        new
                        {
                            PartId = 4,
                            Brand = "Shell",
                            Name = "Coolant Fluid",
                            Type = "Chemical",
                            UnitPrice = 500000m
                        });
                });

            modelBuilder.Entity("EVCenterService.Models.PartsUsed", b =>
                {
                    b.Property<int>("UsageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("UsageID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UsageId"));

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<int?>("OrderId")
                        .HasColumnType("int")
                        .HasColumnName("OrderID");

                    b.Property<int?>("PartId")
                        .HasColumnType("int")
                        .HasColumnName("PartID");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("UsageId")
                        .HasName("PK__PartsUse__29B197C0E363B8D3");

                    b.HasIndex("OrderId");

                    b.HasIndex("PartId");

                    b.ToTable("PartsUsed");

                    b.HasData(
                        new
                        {
                            UsageId = 1,
                            Note = "Brake pads replaced",
                            OrderId = 1,
                            PartId = 3,
                            Quantity = 4
                        },
                        new
                        {
                            UsageId = 2,
                            Note = "Coolant refilled",
                            OrderId = 1,
                            PartId = 4,
                            Quantity = 1
                        });
                });

            modelBuilder.Entity("EVCenterService.Models.ServiceCatalog", b =>
                {
                    b.Property<int>("ServiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ServiceID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ServiceId"));

                    b.Property<decimal?>("BasePrice")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int?>("DurationMinutes")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.HasKey("ServiceId")
                        .HasName("PK__ServiceC__C51BB0EAA34714D3");

                    b.ToTable("ServiceCatalog");

                    b.HasData(
                        new
                        {
                            ServiceId = 1,
                            BasePrice = 20000000m,
                            Description = "Replace entire battery pack",
                            DurationMinutes = 180,
                            Name = "Battery Replacement"
                        },
                        new
                        {
                            ServiceId = 2,
                            BasePrice = 1500000m,
                            Description = "Inspect and replace brake pads if needed",
                            DurationMinutes = 60,
                            Name = "Brake Check"
                        },
                        new
                        {
                            ServiceId = 3,
                            BasePrice = 800000m,
                            Description = "Check coolant and thermal management",
                            DurationMinutes = 45,
                            Name = "Cooling System Check"
                        },
                        new
                        {
                            ServiceId = 4,
                            BasePrice = 1000000m,
                            Description = "Full vehicle health check",
                            DurationMinutes = 90,
                            Name = "General Inspection"
                        });
                });

            modelBuilder.Entity("EVCenterService.Models.Slot", b =>
                {
                    b.Property<int>("SlotId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SlotID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SlotId"));

                    b.Property<int?>("CenterId")
                        .HasColumnType("int")
                        .HasColumnName("CenterID");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("datetime");

                    b.Property<int?>("OrderId")
                        .HasColumnType("int")
                        .HasColumnName("OrderID");

                    b.Property<DateTime?>("StartTime")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("TechnicianId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("TechnicianID");

                    b.HasKey("SlotId")
                        .HasName("PK__Slot__0A124A4F392B4E0A");

                    b.HasIndex("CenterId");

                    b.HasIndex("TechnicianId");

                    b.HasIndex(new[] { "OrderId" }, "UQ__Slot__C3905BAEB2FB822B")
                        .IsUnique()
                        .HasFilter("[OrderID] IS NOT NULL");

                    b.ToTable("Slot");

                    b.HasData(
                        new
                        {
                            SlotId = 1,
                            CenterId = 1,
                            EndTime = new DateTime(2025, 10, 5, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderId = 1,
                            StartTime = new DateTime(2025, 10, 5, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            TechnicianId = new Guid("e7e85ab2-c968-4b00-b8ab-eb1250ffcbc0")
                        },
                        new
                        {
                            SlotId = 2,
                            CenterId = 2,
                            EndTime = new DateTime(2025, 10, 9, 17, 0, 0, 0, DateTimeKind.Unspecified),
                            StartTime = new DateTime(2025, 10, 9, 13, 0, 0, 0, DateTimeKind.Unspecified),
                            TechnicianId = new Guid("5f06e2df-3e55-4dbe-b646-649f6a0c1784")
                        });
                });

            modelBuilder.Entity("EVCenterService.Models.Storage", b =>
                {
                    b.Property<int>("StorageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("StorageID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StorageId"));

                    b.Property<int?>("CenterId")
                        .HasColumnType("int")
                        .HasColumnName("CenterID");

                    b.Property<int?>("MinThreshold")
                        .HasColumnType("int");

                    b.Property<int?>("PartId")
                        .HasColumnType("int")
                        .HasColumnName("PartID");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("StorageId")
                        .HasName("PK__Storage__8A247E37D28F7A41");

                    b.HasIndex("PartId");

                    b.HasIndex(new[] { "CenterId", "PartId" }, "UQ__Storage__2E4C37056410AAE2")
                        .IsUnique()
                        .HasFilter("[CenterID] IS NOT NULL AND [PartID] IS NOT NULL");

                    b.ToTable("Storage");

                    b.HasData(
                        new
                        {
                            StorageId = 1,
                            CenterId = 1,
                            MinThreshold = 3,
                            PartId = 1,
                            Quantity = 10
                        },
                        new
                        {
                            StorageId = 2,
                            CenterId = 1,
                            MinThreshold = 2,
                            PartId = 2,
                            Quantity = 5
                        },
                        new
                        {
                            StorageId = 3,
                            CenterId = 2,
                            MinThreshold = 3,
                            PartId = 3,
                            Quantity = 8
                        },
                        new
                        {
                            StorageId = 4,
                            CenterId = 2,
                            MinThreshold = 5,
                            PartId = 4,
                            Quantity = 15
                        });
                });

            modelBuilder.Entity("EVCenterService.Models.Subscription", b =>
                {
                    b.Property<Guid>("SubscriptionId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("SubscriptionID");

                    b.Property<bool?>("AutoRenew")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("PlanId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("PlanID");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasDefaultValue("active");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UserID");

                    b.HasKey("SubscriptionId")
                        .HasName("PK__Subscrip__9A2B24BD05B92A78");

                    b.HasIndex("PlanId");

                    b.HasIndex("UserId");

                    b.ToTable("Subscription");

                    b.HasData(
                        new
                        {
                            SubscriptionId = new Guid("d4c2fd9c-00ff-40ff-ab88-3eb91f4150f4"),
                            AutoRenew = true,
                            CreatedAt = new DateTime(2025, 10, 21, 21, 24, 12, 378, DateTimeKind.Local).AddTicks(5250),
                            EndDate = new DateTime(2025, 12, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PlanId = new Guid("ffab7bc7-c34e-4683-92f0-4da0fbe4d980"),
                            StartDate = new DateTime(2025, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "active",
                            UserId = new Guid("84d971da-f79c-4071-b38c-0d41bbe05896")
                        });
                });

            modelBuilder.Entity("EVCenterService.Models.SubscriptionPlan", b =>
                {
                    b.Property<Guid>("PlanId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("PlanID");

                    b.Property<string>("Benefits")
                        .HasColumnType("text");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("DurationDays")
                        .HasColumnType("int");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<decimal>("PriceVnd")
                        .HasColumnType("decimal(12, 2)")
                        .HasColumnName("PriceVND");

                    b.HasKey("PlanId")
                        .HasName("PK__Subscrip__755C22D706673C48");

                    b.HasIndex(new[] { "Code" }, "UQ__Subscrip__A25C5AA731620A2C")
                        .IsUnique();

                    b.ToTable("SubscriptionPlan");

                    b.HasData(
                        new
                        {
                            PlanId = new Guid("37107aac-6fa1-4741-a6e6-7dd4e5622bd9"),
                            Benefits = "1 free inspection/month",
                            Code = "BASIC",
                            DurationDays = 30,
                            IsActive = true,
                            Name = "Basic Care",
                            PriceVnd = 499000m
                        },
                        new
                        {
                            PlanId = new Guid("ffab7bc7-c34e-4683-92f0-4da0fbe4d980"),
                            Benefits = "Priority booking, 3 free inspections",
                            Code = "PREMIUM",
                            DurationDays = 90,
                            IsActive = true,
                            Name = "Premium Care",
                            PriceVnd = 999000m
                        });
                });

            modelBuilder.Entity("EVCenterService.Models.Vehicle", b =>
                {
                    b.Property<int>("VehicleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("VehicleID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VehicleId"));

                    b.Property<decimal?>("BatteryCapacity")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<DateOnly?>("LastMaintenanceDate")
                        .HasColumnType("date");

                    b.Property<decimal?>("Mileage")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<string>("Model")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UserID");

                    b.Property<string>("Vin")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("VIN");

                    b.HasKey("VehicleId")
                        .HasName("PK__Vehicle__476B54B29147CA38");

                    b.HasIndex("UserId");

                    b.HasIndex(new[] { "Vin" }, "UQ__Vehicle__C5DF234C30687499")
                        .IsUnique();

                    b.ToTable("Vehicle");

                    b.HasData(
                        new
                        {
                            VehicleId = 1,
                            BatteryCapacity = 82.0m,
                            LastMaintenanceDate = new DateOnly(2025, 8, 15),
                            Mileage = 15000m,
                            Model = "VinFast VF8",
                            UserId = new Guid("84d971da-f79c-4071-b38c-0d41bbe05896"),
                            Vin = "VN123456789ABCDEFG"
                        },
                        new
                        {
                            VehicleId = 2,
                            BatteryCapacity = 75.5m,
                            LastMaintenanceDate = new DateOnly(2025, 9, 20),
                            Mileage = 22000m,
                            Model = "Tesla Model Y",
                            UserId = new Guid("204d12c7-5c95-4112-90b7-4ff604d3c518"),
                            Vin = "VN999999999ABCDEFG"
                        });
                });

            modelBuilder.Entity("EVCenterService.Models.Feedback", b =>
                {
                    b.HasOne("EVCenterService.Models.OrderService", "Order")
                        .WithMany("Feedbacks")
                        .HasForeignKey("OrderId")
                        .HasConstraintName("FK__Feedback__OrderI__6FE99F9F");

                    b.HasOne("EVCenterService.Models.Account", "User")
                        .WithMany("Feedbacks")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__Feedback__UserID__70DDC3D8");

                    b.Navigation("Order");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EVCenterService.Models.Invoice", b =>
                {
                    b.HasOne("EVCenterService.Models.Subscription", "Subscription")
                        .WithMany("Invoices")
                        .HasForeignKey("SubscriptionId")
                        .HasConstraintName("FK__Invoice__Subscri__68487DD7");

                    b.Navigation("Subscription");
                });

            modelBuilder.Entity("EVCenterService.Models.Notification", b =>
                {
                    b.HasOne("EVCenterService.Models.Account", "Receiver")
                        .WithMany("Notifications")
                        .HasForeignKey("ReceiverId")
                        .HasConstraintName("FK__Notificat__Recei__6C190EBB");

                    b.Navigation("Receiver");
                });

            modelBuilder.Entity("EVCenterService.Models.OrderDetail", b =>
                {
                    b.HasOne("EVCenterService.Models.OrderService", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .HasConstraintName("FK__OrderDeta__Order__5070F446");

                    b.HasOne("EVCenterService.Models.ServiceCatalog", "Service")
                        .WithMany("OrderDetails")
                        .HasForeignKey("ServiceId")
                        .HasConstraintName("FK__OrderDeta__Servi__5165187F");

                    b.Navigation("Order");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("EVCenterService.Models.OrderService", b =>
                {
                    b.HasOne("EVCenterService.Models.Account", "User")
                        .WithMany("OrderServices")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__OrderServ__UserI__4CA06362");

                    b.HasOne("EVCenterService.Models.Vehicle", "Vehicle")
                        .WithMany("OrderServices")
                        .HasForeignKey("VehicleId")
                        .HasConstraintName("FK__OrderServ__Vehic__4BAC3F29");

                    b.Navigation("User");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("EVCenterService.Models.PartsUsed", b =>
                {
                    b.HasOne("EVCenterService.Models.OrderService", "Order")
                        .WithMany("PartsUseds")
                        .HasForeignKey("OrderId")
                        .HasConstraintName("FK__PartsUsed__Order__5441852A");

                    b.HasOne("EVCenterService.Models.Part", "Part")
                        .WithMany("PartsUseds")
                        .HasForeignKey("PartId")
                        .HasConstraintName("FK__PartsUsed__PartI__5535A963");

                    b.Navigation("Order");

                    b.Navigation("Part");
                });

            modelBuilder.Entity("EVCenterService.Models.Slot", b =>
                {
                    b.HasOne("EVCenterService.Models.MaintenanceCenter", "Center")
                        .WithMany("Slots")
                        .HasForeignKey("CenterId")
                        .HasConstraintName("FK__Slot__CenterID__59063A47");

                    b.HasOne("EVCenterService.Models.OrderService", "Order")
                        .WithOne("Slot")
                        .HasForeignKey("EVCenterService.Models.Slot", "OrderId")
                        .HasConstraintName("FK__Slot__OrderID__5AEE82B9");

                    b.HasOne("EVCenterService.Models.Account", "Technician")
                        .WithMany("Slots")
                        .HasForeignKey("TechnicianId")
                        .HasConstraintName("FK__Slot__Technician__59FA5E80");

                    b.Navigation("Center");

                    b.Navigation("Order");

                    b.Navigation("Technician");
                });

            modelBuilder.Entity("EVCenterService.Models.Storage", b =>
                {
                    b.HasOne("EVCenterService.Models.MaintenanceCenter", "Center")
                        .WithMany("Storages")
                        .HasForeignKey("CenterId")
                        .HasConstraintName("FK__Storage__CenterI__45F365D3");

                    b.HasOne("EVCenterService.Models.Part", "Part")
                        .WithMany("Storages")
                        .HasForeignKey("PartId")
                        .HasConstraintName("FK__Storage__PartID__46E78A0C");

                    b.Navigation("Center");

                    b.Navigation("Part");
                });

            modelBuilder.Entity("EVCenterService.Models.Subscription", b =>
                {
                    b.HasOne("EVCenterService.Models.SubscriptionPlan", "Plan")
                        .WithMany("Subscriptions")
                        .HasForeignKey("PlanId")
                        .HasConstraintName("FK__Subscript__PlanI__656C112C");

                    b.HasOne("EVCenterService.Models.Account", "User")
                        .WithMany("Subscriptions")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__Subscript__UserI__6477ECF3");

                    b.Navigation("Plan");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EVCenterService.Models.Vehicle", b =>
                {
                    b.HasOne("EVCenterService.Models.Account", "User")
                        .WithMany("Vehicles")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__Vehicle__UserID__3D5E1FD2");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EVCenterService.Models.Account", b =>
                {
                    b.Navigation("Feedbacks");

                    b.Navigation("Notifications");

                    b.Navigation("OrderServices");

                    b.Navigation("Slots");

                    b.Navigation("Subscriptions");

                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("EVCenterService.Models.MaintenanceCenter", b =>
                {
                    b.Navigation("Slots");

                    b.Navigation("Storages");
                });

            modelBuilder.Entity("EVCenterService.Models.OrderService", b =>
                {
                    b.Navigation("Feedbacks");

                    b.Navigation("OrderDetails");

                    b.Navigation("PartsUseds");

                    b.Navigation("Slot");
                });

            modelBuilder.Entity("EVCenterService.Models.Part", b =>
                {
                    b.Navigation("PartsUseds");

                    b.Navigation("Storages");
                });

            modelBuilder.Entity("EVCenterService.Models.ServiceCatalog", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("EVCenterService.Models.Subscription", b =>
                {
                    b.Navigation("Invoices");
                });

            modelBuilder.Entity("EVCenterService.Models.SubscriptionPlan", b =>
                {
                    b.Navigation("Subscriptions");
                });

            modelBuilder.Entity("EVCenterService.Models.Vehicle", b =>
                {
                    b.Navigation("OrderServices");
                });
#pragma warning restore 612, 618
        }
    }
}
